name: Nuke CICD Pipeline
on:
  push:
    branches:
    - '*'
    tags:
    - '**'
  pull_request:
    branches:
    - '**'
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
jobs:
  pre_setup:
    name: Pre Setup
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ubuntu-22.04-nuget-pre_setup-${{ hashFiles('**/*.csproj') }}
        restore-keys: ubuntu-22.04-nuget-pre_setup-
    - id: setup
      name: Run Nuke PipelinePreSetup
      run: chmod +x ./build.sh && ./build.sh PipelinePreSetup --args "github"
    - id: PRE_SETUP_HAS_RELEASE
      name: Output PRE_SETUP_HAS_RELEASE
      run: echo "PRE_SETUP_HAS_RELEASE=$(cat ./.nuke/temp/has_release.txt)" >> $GITHUB_OUTPUT
    - id: PRE_SETUP_OUTPUT
      name: Output PRE_SETUP_OUTPUT
      run: echo "PRE_SETUP_OUTPUT=$(cat ./.nuke/temp/pre_setup_output.json)" >> $GITHUB_OUTPUT
    - id: PRE_SETUP_OUTPUT_TEST_MATRIX
      name: Output PRE_SETUP_OUTPUT_TEST_MATRIX
      run: echo "PRE_SETUP_OUTPUT_TEST_MATRIX=$(cat ./.nuke/temp/pre_setup_output_test_matrix.json)" >> $GITHUB_OUTPUT
    - id: PRE_SETUP_OUTPUT_BUILD_MATRIX
      name: Output PRE_SETUP_OUTPUT_BUILD_MATRIX
      run: echo "PRE_SETUP_OUTPUT_BUILD_MATRIX=$(cat ./.nuke/temp/pre_setup_output_build_matrix.json)" >> $GITHUB_OUTPUT
    - id: PRE_SETUP_OUTPUT_PUBLISH_MATRIX
      name: Output PRE_SETUP_OUTPUT_PUBLISH_MATRIX
      run: echo "PRE_SETUP_OUTPUT_PUBLISH_MATRIX=$(cat ./.nuke/temp/pre_setup_output_publish_matrix.json)" >> $GITHUB_OUTPUT
    outputs:
      PRE_SETUP_HAS_RELEASE: ${{ steps.PRE_SETUP_HAS_RELEASE.outputs.PRE_SETUP_HAS_RELEASE }}
      PRE_SETUP_OUTPUT: ${{ steps.PRE_SETUP_OUTPUT.outputs.PRE_SETUP_OUTPUT }}
      PRE_SETUP_OUTPUT_TEST_MATRIX: ${{ steps.PRE_SETUP_OUTPUT_TEST_MATRIX.outputs.PRE_SETUP_OUTPUT_TEST_MATRIX }}
      PRE_SETUP_OUTPUT_BUILD_MATRIX: ${{ steps.PRE_SETUP_OUTPUT_BUILD_MATRIX.outputs.PRE_SETUP_OUTPUT_BUILD_MATRIX }}
      PRE_SETUP_OUTPUT_PUBLISH_MATRIX: ${{ steps.PRE_SETUP_OUTPUT_PUBLISH_MATRIX.outputs.PRE_SETUP_OUTPUT_PUBLISH_MATRIX }}
  test:
    name: Test - ${{ matrix.name }}
    runs-on: ${{ matrix.runs_on }}
    steps:
    - uses: actions/checkout@v4
      if: ${{ matrix.id != 'skip' }}
    - uses: actions/cache@v4
      if: ${{ matrix.id != 'skip' }}
      with:
        path: ~/.nuget/packages
        key: ${{ matrix.runs_on }}-nuget-test-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ matrix.runs_on }}-nuget-test-
    - name: Run Nuke PipelineTest
      run: ${{ matrix.build_script }} PipelineTest --args "${{ matrix.ids_to_run }}"
      if: ${{ matrix.id != 'skip' }}
    needs:
    - pre_setup
    env:
      PRE_SETUP_OUTPUT: ${{ needs.pre_setup.outputs.PRE_SETUP_OUTPUT }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.pre_setup.outputs.PRE_SETUP_OUTPUT_TEST_MATRIX) }}
  build:
    name: Build - ${{ matrix.name }}
    runs-on: ${{ matrix.runs_on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ matrix.runs_on }}-nuget-build-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ matrix.runs_on }}-nuget-build-
    - name: Run Nuke PipelineBuild
      run: ${{ matrix.build_script }} PipelineBuild --args "${{ matrix.ids_to_run }}"
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.id }}
        path: ./.nuke/temp/output/*
        if-no-files-found: error
        retention-days: 1
    needs:
    - pre_setup
    - test
    if: ${{ needs.pre_setup.outputs.PRE_SETUP_HAS_RELEASE == 'true' }}
    env:
      PRE_SETUP_OUTPUT: ${{ needs.pre_setup.outputs.PRE_SETUP_OUTPUT }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.pre_setup.outputs.PRE_SETUP_OUTPUT_BUILD_MATRIX) }}
  publish:
    name: Publish - ${{ matrix.name }}
    runs-on: ${{ matrix.runs_on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ matrix.runs_on }}-nuget-publish-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ matrix.runs_on }}-nuget-publish-
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./.nuke/temp/output
        pattern: ${{ matrix.id }}
        merge-multiple: true
    - name: Run Nuke PipelinePublish
      run: ${{ matrix.build_script }} PipelinePublish --args "${{ matrix.ids_to_run }}"
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
    - pre_setup
    - test
    - build
    if: ${{ needs.pre_setup.outputs.PRE_SETUP_HAS_RELEASE == 'true' }}
    env:
      PRE_SETUP_OUTPUT: ${{ needs.pre_setup.outputs.PRE_SETUP_OUTPUT }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.pre_setup.outputs.PRE_SETUP_OUTPUT_PUBLISH_MATRIX) }}
  release:
    name: Release
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ matrix.runs_on }}-nuget-release-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ matrix.runs_on }}-nuget-release-
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./.nuke/temp/output
    - name: Run Nuke PipelineRelease
      run: chmod +x ./build.sh && ./build.sh PipelineRelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
    - pre_setup
    - test
    - build
    if: ${{ needs.pre_setup.outputs.PRE_SETUP_HAS_RELEASE == 'true' }}
    env:
      PRE_SETUP_OUTPUT: ${{ needs.pre_setup.outputs.PRE_SETUP_OUTPUT }}
  post_setup:
    name: Post Setup
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    needs:
    - pre_setup
    - test
    - build
    - publish
    - release
    if: success() || failure() || always()
    env:
      PRE_SETUP_OUTPUT: ${{ needs.pre_setup.outputs.PRE_SETUP_OUTPUT }}
