name: Nuke CICD Pipeline
trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '**'
jobs:
- job: pre_setup
  displayName: Pre Setup
  pool:
    vmImage: ubuntu-22.04
  steps:
  - checkout: self
    persistCredentials: true
    fetchDepth: 0
  - script: chmod +x ./build.sh && ./build.sh PipelinePreSetup --args "azure"
    displayName: Run Nuke PipelinePreSetup
  - script: echo "##vso[task.setvariable variable=PRE_SETUP_HAS_RELEASE]$(cat ./.nuke/temp/pre_setup_has_release.txt)" && echo "##vso[task.setvariable variable=PRE_SETUP_HAS_RELEASE;isOutput=true]$(cat ./.nuke/temp/pre_setup_has_release.txt)"
    name: PRE_SETUP_HAS_RELEASE
    displayName: Output PRE_SETUP_HAS_RELEASE
  - script: echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT]$(cat ./.nuke/temp/pre_setup_output.json)" && echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT;isOutput=true]$(cat ./.nuke/temp/pre_setup_output.json)"
    name: PRE_SETUP_OUTPUT
    displayName: Output PRE_SETUP_OUTPUT
  - script: echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_TEST_MATRIX]$(cat ./.nuke/temp/pre_setup_output_test_matrix.json)" && echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_TEST_MATRIX;isOutput=true]$(cat ./.nuke/temp/pre_setup_output_test_matrix.json)"
    name: PRE_SETUP_OUTPUT_TEST_MATRIX
    displayName: Output PRE_SETUP_OUTPUT_TEST_MATRIX
  - script: echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_BUILD_MATRIX]$(cat ./.nuke/temp/pre_setup_output_build_matrix.json)" && echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_BUILD_MATRIX;isOutput=true]$(cat ./.nuke/temp/pre_setup_output_build_matrix.json)"
    name: PRE_SETUP_OUTPUT_BUILD_MATRIX
    displayName: Output PRE_SETUP_OUTPUT_BUILD_MATRIX
  - script: echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_PUBLISH_MATRIX]$(cat ./.nuke/temp/pre_setup_output_publish_matrix.json)" && echo "##vso[task.setvariable variable=PRE_SETUP_OUTPUT_PUBLISH_MATRIX;isOutput=true]$(cat ./.nuke/temp/pre_setup_output_publish_matrix.json)"
    name: PRE_SETUP_OUTPUT_PUBLISH_MATRIX
    displayName: Output PRE_SETUP_OUTPUT_PUBLISH_MATRIX
  variables:
    GITHUB_TOKEN: $(GITHUB_PAT)
    GH_TOKEN: $(GITHUB_PAT)
- job: test
  displayName: Test
  pool:
    vmImage: $(runs_on)
  steps:
  - checkout: self
    persistCredentials: true
    condition: ne(variables['id'], 'skip')
  - script: $(build_script) PipelineTest --args "$(ids_to_run)"
    displayName: Run Nuke PipelineTest
    condition: ne(variables['id'], 'skip')
  dependsOn:
  - pre_setup
  variables:
    PRE_SETUP_OUTPUT: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT.PRE_SETUP_OUTPUT'] ]
  strategy:
    matrix: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT_TEST_MATRIX.PRE_SETUP_OUTPUT_TEST_MATRIX'] ]
- job: build
  displayName: Build
  pool:
    vmImage: $(runs_on)
  steps:
  - checkout: self
    persistCredentials: true
  - script: $(build_script) PipelineBuild --args "$(ids_to_run)"
    displayName: Run Nuke PipelineBuild
  - task: PublishPipelineArtifact@1
    displayName: Upload artifacts
    inputs:
      artifact: $(id)
      targetPath: ./.nuke/temp/output/*
  dependsOn:
  - pre_setup
  - test
  condition: eq(dependencies.pre_setup.outputs['PRE_SETUP_HAS_RELEASE.PRE_SETUP_HAS_RELEASE'], 'true')
  strategy:
    matrix: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT_BUILD_MATRIX.PRE_SETUP_OUTPUT_BUILD_MATRIX'] ]
  variables:
    PRE_SETUP_OUTPUT: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT.PRE_SETUP_OUTPUT'] ]
    NUGET_AUTH_TOKEN: $(NUGET_AUTH_TOKEN)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
- job: publish
  displayName: Publish
  pool:
    vmImage: $(runs_on)
  steps:
  - checkout: self
    persistCredentials: true
  - task: DownloadPipelineArtifact@2
    displayName: Download artifacts
    inputs:
      artifact: $(id)
      path: ./.nuke/temp/output
  - script: $(build_script) PipelinePublish --args "$(ids_to_run)"
    displayName: Run Nuke PipelinePublish
  - script: echo "##vso[task.setvariable variable=PUBLISH_OUTPUT_SUCCESS]$(cat ./.nuke/temp/publish_success.txt)" && echo "##vso[task.setvariable variable=PUBLISH_OUTPUT_SUCCESS;isOutput=true]$(cat ./.nuke/temp/publish_success.txt)"
    name: PUBLISH_OUTPUT_SUCCESS
    displayName: Output PUBLISH_OUTPUT_SUCCESS
  dependsOn:
  - pre_setup
  - test
  - build
  condition: eq(dependencies.pre_setup.outputs['PRE_SETUP_HAS_RELEASE.PRE_SETUP_HAS_RELEASE'], 'true')
  variables:
    PRE_SETUP_OUTPUT: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT.PRE_SETUP_OUTPUT'] ]
    NUGET_AUTH_TOKEN: $(NUGET_AUTH_TOKEN)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  strategy:
    matrix: $[ dependencies.pre_setup.outputs['PRE_SETUP_OUTPUT_PUBLISH_MATRIX.PRE_SETUP_OUTPUT_PUBLISH_MATRIX'] ]
