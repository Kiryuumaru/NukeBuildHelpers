name: Nuke CICD Pipeline
trigger:
  batch: true
  branches:
    include:
    - prerelease
    - main
  tags:
    include:
    - bump-*
pr:
  branches:
    include:
    - '**'
jobs:
- job: PRE_SETUP
  displayName: Pre Setup
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-22.04
  steps:
  - checkout: self
    persistCredentials: true
    fetchDepth: 0
  - script: chmod +x ./build.sh && ./build.sh PipelinePreSetup
    name: NUKE_RUN
    displayName: Run Nuke PipelinePreSetup
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
- job: NUKEBUILDHELPERSTEST1
  displayName: Test try 1
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: echo "Test azure 1"
    name: test_azure_1
    displayName: Custom azure step test 1
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelineTest --args "NukeBuildHelpersTest1"
    name: NUKE_RUN
    displayName: Run Nuke PipelineTest
  - script: echo "Test azure 2"
    name: test_azure_2
    displayName: Custom azure step test 2
  dependsOn:
  - PRE_SETUP
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST1_CACHE_MAIN_RESTORE_KEY'] ]
- job: NUKEBUILDHELPERSTEST2
  displayName: Test try 2
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelineTest --args "NukeBuildHelpersTest2"
    name: NUKE_RUN
    displayName: Run Nuke PipelineTest
  dependsOn:
  - PRE_SETUP
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSTEST2_CACHE_MAIN_RESTORE_KEY'] ]
- job: NUKEBUILDHELPERSBUILD1
  displayName: Build main
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelineBuild --args "NukeBuildHelpersBuild1"
    name: NUKE_RUN
    displayName: Run Nuke PipelineBuild
  - task: PublishPipelineArtifact@1
    displayName: Upload Artifacts
    inputs:
      artifact: nuke_build_helpers___NukeBuildHelpersBuild1
      targetPath: ./.nuke/output
      continueOnError: true
  dependsOn:
  - PRE_SETUP
  - NUKEBUILDHELPERSTEST1
  - NUKEBUILDHELPERSTEST2
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD1_CACHE_MAIN_RESTORE_KEY'] ]
- job: NUKEBUILDHELPERSBUILD2
  displayName: Build try
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelineBuild --args "NukeBuildHelpersBuild2"
    name: NUKE_RUN
    displayName: Run Nuke PipelineBuild
  - task: PublishPipelineArtifact@1
    displayName: Upload Artifacts
    inputs:
      artifact: nuke_build_helpers___NukeBuildHelpersBuild2
      targetPath: ./.nuke/output
      continueOnError: true
  dependsOn:
  - PRE_SETUP
  - NUKEBUILDHELPERSTEST1
  - NUKEBUILDHELPERSTEST2
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD2_CACHE_MAIN_RESTORE_KEY'] ]
- job: NUKEBUILDHELPERSBUILD3
  displayName: Build try 2
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelineBuild --args "NukeBuildHelpersBuild3"
    name: NUKE_RUN
    displayName: Run Nuke PipelineBuild
  - task: PublishPipelineArtifact@1
    displayName: Upload Artifacts
    inputs:
      artifact: nuke_build_helpers2___NukeBuildHelpersBuild3
      targetPath: ./.nuke/output
      continueOnError: true
  dependsOn:
  - PRE_SETUP
  - NUKEBUILDHELPERSTEST1
  - NUKEBUILDHELPERSTEST2
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSBUILD3_CACHE_MAIN_RESTORE_KEY'] ]
- job: NUKEBUILDHELPERSPUBLISH
  displayName: Publish - nuke_build_helpers (NukeBuildHelpersPublish)
  pool:
    name: $(NUKE_PRE_SETUP_POOL_NAME)
    vmImage: $(NUKE_PRE_SETUP_POOL_VM_IMAGE)
  steps:
  - checkout: self
    persistCredentials: true
  - task: DownloadPipelineArtifact@2
    displayName: Download Artifacts
    inputs:
      itemPattern: nuke_build_helpers___*/**
      path: ./.nuke/temp/artifacts
      continueOnError: true
  - task: Cache@2
    displayName: Cache Run
    inputs:
      path: ./.nuke/cache
      key: $(NUKE_PRE_SETUP_CACHE_KEY)
      restoreKeys: |-
        $(NUKE_PRE_SETUP_CACHE_RESTORE_KEY)
        $(NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY)
  - script: $(NUKE_PRE_SETUP_RUN_SCRIPT) PipelinePublish --args "NukeBuildHelpersPublish"
    name: NUKE_RUN
    displayName: Run Nuke PipelinePublish
  dependsOn:
  - PRE_SETUP
  - NUKEBUILDHELPERSBUILD1
  - NUKEBUILDHELPERSBUILD2
  - NUKEBUILDHELPERSBUILD3
  condition: and(not(or(failed(), canceled())), eq(variables.NUKE_PRE_SETUP_CONDITION, 'true'))
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_PRE_SETUP_CONDITION: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_CONDITION'] ]
    NUKE_PRE_SETUP_POOL_NAME: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_POOL_NAME'] ]
    NUKE_PRE_SETUP_POOL_VM_IMAGE: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_POOL_VM_IMAGE'] ]
    NUKE_PRE_SETUP_RUN_SCRIPT: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_RUN_SCRIPT'] ]
    NUKE_PRE_SETUP_CACHE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_CACHE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_CACHE_RESTORE_KEY'] ]
    NUKE_PRE_SETUP_CACHE_MAIN_RESTORE_KEY: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP_NUKEBUILDHELPERSPUBLISH_CACHE_MAIN_RESTORE_KEY'] ]
- job: POST_SETUP
  displayName: Post Setup
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-22.04
  steps:
  - checkout: self
    persistCredentials: true
  - task: DownloadPipelineArtifact@2
    displayName: Download artifacts
    inputs:
      path: ./.nuke/temp/artifacts
      patterns: '**'
      continueOnError: true
  - script: chmod +x ./build.sh && ./build.sh PipelinePostSetup
    displayName: Run Nuke PipelinePostSetup
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
  dependsOn:
  - PRE_SETUP
  - NUKEBUILDHELPERSTEST1
  - NUKEBUILDHELPERSTEST2
  - NUKEBUILDHELPERSBUILD1
  - NUKEBUILDHELPERSBUILD2
  - NUKEBUILDHELPERSBUILD3
  - NUKEBUILDHELPERSPUBLISH
  condition: always()
  variables:
    NUKE_PRE_SETUP: $[ dependencies.PRE_SETUP.outputs['NUKE_RUN.NUKE_PRE_SETUP'] ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSTEST1: $[ dependencies.NUKEBUILDHELPERSTEST1.result ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSTEST2: $[ dependencies.NUKEBUILDHELPERSTEST2.result ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSBUILD1: $[ dependencies.NUKEBUILDHELPERSBUILD1.result ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSBUILD2: $[ dependencies.NUKEBUILDHELPERSBUILD2.result ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSBUILD3: $[ dependencies.NUKEBUILDHELPERSBUILD3.result ]
    NUKE_RUN_RESULT_AZURE_NUKEBUILDHELPERSPUBLISH: $[ dependencies.NUKEBUILDHELPERSPUBLISH.result ]
